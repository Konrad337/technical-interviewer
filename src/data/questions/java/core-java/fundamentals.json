{
  "category": "Core Java",
  "subcategory": "Fundamentals",
  "questions": [
    {
      "id": "java-equals-method-core-java-f-1",
      "skillLevel": "beginner",
      "shortTitle": ".equals() Method",
      "question": "Can you explain the role of the .equals() method in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Content Comparison",
              "description": ".equals() is used to compare the logical equality (i.e. the content) of two objects rather than their memory addresses."
            },
            {
              "title": "Default Behavior",
              "description": "By default, Object’s .equals() compares references, so it must be overridden for value-based comparisons."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "When to Override",
              "description": "Override .equals() when your class represents an entity whose equality is determined by its data fields."
            },
            {
              "title": "hashCode() Contract",
              "description": "Overriding .equals() requires also overriding hashCode() so that equal objects yield the same hash code."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Robust Implementation",
              "description": "A good .equals() implementation checks for self-reference, null values, type compatibility, and compares key fields in an efficient order."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-equals-operator-core-java-f-2",
        "java-hashcode-method-core-java-f-3"
      ]
    },
    {
      "id": "java-equals-operator-core-java-f-2",
      "skillLevel": "beginner",
      "shortTitle": "== Operator",
      "question": "Could you describe how the '==' (equality) operator works in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Reference Comparison",
              "description": "For objects, '==' checks if two references point to the exact same memory location."
            },
            {
              "title": "Primitive Comparison",
              "description": "For primitives, it compares the actual values."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Pitfalls",
              "description": "Using '==' to compare objects can lead to errors because it does not compare internal state; for example, comparing strings with '==' can be unreliable."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Autoboxing Considerations",
              "description": "Autoboxing may obscure issues with '==' when comparing wrapper objects, so its behavior should not be assumed."
            },
            {
              "title": "Null Safety",
              "description": "'==' handles null values safely, returning false if one operand is null."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-equals-method-core-java-f-1"
      ]
    },
    {
      "id": "java-hashcode-method-core-java-f-3",
      "skillLevel": "intermediate",
      "shortTitle": "hashCode() Method",
      "question": "Please describe the role of the hashCode() method in Java.",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Purpose",
              "description": "hashCode() generates an integer used by hash-based collections (like HashMap) to locate objects efficiently."
            },
            {
              "title": "Equality Contract",
              "description": "If two objects are equal via .equals(), they must return the same hash code."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Implementation Guidelines",
              "description": "When overriding hashCode(), use the same fields as in .equals() to maintain consistency."
            },
            {
              "title": "Performance Impact",
              "description": "A poorly implemented hashCode() can cause collisions, degrading collection performance."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Modern Techniques",
              "description": "Helper methods like Objects.hash() simplify creating effective hash code implementations."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-equals-method-core-java-f-1"
      ]
    },
    {
      "id": "java-final-keyword-core-java-f-4",
      "skillLevel": "beginner",
      "shortTitle": "Final Keyword Usages",
      "question": "In your experience, what are some common uses of the final keyword in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Final Variables",
              "description": "Final variables can be assigned only once; they are commonly used for constants."
            },
            {
              "title": "Final Methods",
              "description": "A final method cannot be overridden by subclasses, preserving its behavior."
            },
            {
              "title": "Final Classes",
              "description": "Declaring a class as final prevents it from being subclassed, which secures its design."
            },
            {
              "title": "Final Parameters",
              "description": "Final parameters cannot be reassigned within a method, reducing accidental modifications."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Design Clarity",
              "description": "Using final signals that a variable or method is intended to remain unchanged."
            },
            {
              "title": "Effective Final",
              "description": "Variables that are never reassigned are effectively final and can be used in lambda expressions."
            },
            {
              "title": "Thread Safety",
              "description": "Final fields support thread safety in immutable classes, although final alone doesn’t guarantee immutability."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Final vs. Immutability",
              "description": "Final prevents reassignment, but true immutability requires unmodifiable state and defensive copying."
            },
            {
              "title": "Performance Benefits",
              "description": "The JVM can optimize final methods (e.g., via inlining), offering potential performance gains."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-string-immutability-core-java-f-5",
      "skillLevel": "beginner",
      "shortTitle": "String Immutability",
      "question": "Can you share why Strings are immutable in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Definition",
              "description": "Once created, a String’s value cannot be changed, which prevents accidental modifications."
            },
            {
              "title": "Thread Safety",
              "description": "Immutability makes Strings inherently thread-safe."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Memory Efficiency",
              "description": "String immutability enables string pooling, reducing memory overhead by reusing identical literals."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Drawbacks",
              "description": "Heavy string manipulation may be inefficient because each modification creates a new object; StringBuilder is recommended for such cases."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-string-pool-core-java-f-6"
      ]
    },
    {
      "id": "java-string-pool-core-java-f-6",
      "skillLevel": "intermediate",
      "shortTitle": "String Pool",
      "question": "Could you explain the significance of the String Pool in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Concept",
              "description": "The String Pool is a dedicated memory area for storing string literals to avoid duplication."
            },
            {
              "title": "Reusability",
              "description": "Identical string literals share the same instance, which conserves memory."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "intern() Method",
              "description": "Using intern() allows dynamically created strings to be added to or retrieved from the pool."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-string-immutability-core-java-f-5"
      ]
    },
    {
      "id": "java-stringbuilder-vs-stringbuffer-core-java-f-7",
      "skillLevel": "beginner",
      "shortTitle": "StringBuilder vs StringBuffer",
      "question": "Can you compare StringBuilder and StringBuffer in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Mutability",
              "description": "Both classes provide mutable sequences of characters for efficient string manipulation."
            },
            {
              "title": "Thread Safety",
              "description": "StringBuffer is synchronized and thread-safe, whereas StringBuilder is not."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Performance",
              "description": "In single-threaded contexts, StringBuilder is typically faster due to lower overhead."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-string-immutability-core-java-f-5"
      ]
    },
    {
      "id": "java-lambda-expressions-core-java-f-8",
      "skillLevel": "intermediate",
      "shortTitle": "Lambda Expressions",
      "question": "Do you mind explaining what lambda expressions in Java are all about?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Definition",
              "description": "Lambda expressions are anonymous functions that provide a concise way to implement interfaces with a single abstract method."
            },
            {
              "title": "Syntax",
              "description": "They use the form (parameters) -> expression or block, reducing boilerplate code."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Benefits",
              "description": "Lambdas simplify code and promote a functional programming style, especially when used with functional interfaces."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-functional-interfaces-core-java-f-9"
      ]
    },
    {
      "id": "java-functional-interfaces-core-java-f-9",
      "skillLevel": "intermediate",
      "shortTitle": "Functional Interfaces",
      "question": "Can you describe what a functional interface in Java is?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Definition",
              "description": "A functional interface has exactly one abstract method and serves as the target for lambda expressions."
            },
            {
              "title": "@FunctionalInterface",
              "description": "This annotation ensures that an interface conforms to the functional interface requirements."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Common Examples",
              "description": "Examples include Runnable, Callable, Predicate, Function, and Consumer."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-lambda-expressions-core-java-f-8"
      ]
    },
    {
      "id": "java-generics-core-java-f-10",
      "skillLevel": "intermediate",
      "shortTitle": "Generics",
      "question": "Please explain the concept of generics in Java.",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Type Safety",
              "description": "Generics allow classes and methods to operate on parameterized types, reducing runtime type errors."
            },
            {
              "title": "Syntax",
              "description": "For example, a generic class like Box<T> enforces compile-time type checks."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Type Erasure",
              "description": "At runtime, generic type information is removed (erased), which has implications for reflection and performance."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-static-keyword-core-java-f-11",
      "skillLevel": "beginner",
      "shortTitle": "Static Keyword",
      "question": "Could you describe what the static keyword does in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Class-Level Members",
              "description": "Static members belong to the class rather than any instance, making them accessible without an object."
            },
            {
              "title": "Common Uses",
              "description": "They are used for constants, utility methods, and shared resources."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Static Blocks",
              "description": "Static blocks allow for complex initialization when the class is loaded."
            },
            {
              "title": "Static Nested Classes",
              "description": "These classes are defined within another class and do not require an instance of the outer class."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Memory Implications",
              "description": "Static members exist as long as the class is loaded, which affects resource management."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-inheritance-polymorphism-core-java-f-13",
      "skillLevel": "beginner",
      "shortTitle": "Inheritance & Polymorphism",
      "question": "Can you explain how inheritance and polymorphism work in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Inheritance",
              "description": "Inheritance allows a class to derive properties and behavior from a parent class."
            },
            {
              "title": "Polymorphism",
              "description": "Polymorphism lets a variable of a parent type refer to objects of child types, enabling flexible code."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Code Reuse",
              "description": "These concepts promote code reuse and simplify maintenance by reducing duplication."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-interfaces-abstract-core-java-f-14",
      "skillLevel": "intermediate",
      "shortTitle": "Interfaces vs Abstract Classes",
      "question": "In your experience, how do interfaces differ from abstract classes in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Interfaces",
              "description": "Interfaces define a contract without holding state and support multiple inheritance."
            },
            {
              "title": "Abstract Classes",
              "description": "Abstract classes can provide partial implementation and maintain state, but a class can extend only one."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Usage Considerations",
              "description": "Interfaces are best when disparate classes share behavior, while abstract classes suit a clear inheritance hierarchy."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-overloading-overriding-core-java-f-15",
      "skillLevel": "beginner",
      "shortTitle": "Overloading vs Overriding",
      "question": "Could you clarify the differences between method overloading and method overriding in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Method Overloading",
              "description": "Overloading means having multiple methods with the same name but different parameter lists in one class; resolved at compile time."
            },
            {
              "title": "Method Overriding",
              "description": "Overriding occurs when a subclass provides its own implementation of a method from its parent; resolved at runtime."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Rules and Behavior",
              "description": "Overriding requires identical method signatures (with allowance for covariant return types) and cannot reduce access levels, while overloading requires differing parameter types or counts."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-access-modifiers-core-java-f-16",
      "skillLevel": "beginner",
      "shortTitle": "Access Modifiers",
      "question": "Please outline the access modifiers available in Java.",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Public",
              "description": "Accessible from any class."
            },
            {
              "title": "Protected",
              "description": "Accessible within the same package and in subclasses."
            },
            {
              "title": "Private",
              "description": "Accessible only within the declaring class."
            },
            {
              "title": "Default",
              "description": "Accessible only within the same package when no modifier is specified."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-constructor-overloading-core-java-f-17",
      "skillLevel": "beginner",
      "shortTitle": "Constructor Overloading",
      "question": "Can you explain what constructor overloading in Java means?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Multiple Constructors",
              "description": "A class can have several constructors with different parameter lists to allow different ways of instantiation."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Flexibility",
              "description": "This enables objects to be created with varying levels of initial data, increasing usability."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-immutable-design-core-java-f-18",
      "skillLevel": "intermediate",
      "shortTitle": "Immutable Class Design",
      "question": "Do you know the key principles for designing an immutable class in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Core Requirements",
              "description": "Declare all fields as private and final, initialize them in the constructor, and provide no setters."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Defensive Copying",
              "description": "For mutable fields, create defensive copies to protect the internal state from external changes."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-annotations-core-java-f-19",
      "skillLevel": "beginner",
      "shortTitle": "Annotations",
      "question": "Could you share what annotations in Java are used for?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Metadata",
              "description": "Annotations provide metadata about the code, influencing both compile-time and runtime behavior without altering program logic."
            },
            {
              "title": "Common Examples",
              "description": "Examples include @Override, @Deprecated, and @SuppressWarnings."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Custom Annotations",
              "description": "Developers can create custom annotations for domain-specific metadata, processed via reflection or build tools."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-autoboxing-core-java-f-21",
      "skillLevel": "beginner",
      "shortTitle": "Autoboxing",
      "question": "Please explain the concept of autoboxing in Java.",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Automatic Conversion",
              "description": "Autoboxing automatically converts primitives to their corresponding wrapper classes and vice versa."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Potential Issues",
              "description": "Excessive autoboxing can lead to performance overhead and unexpected NullPointerExceptions if wrapper objects are null."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-switch-expressions-core-java-f-22",
      "skillLevel": "intermediate",
      "shortTitle": "Switch Expressions",
      "question": "In your experience, what benefits do switch expressions in Java offer?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Simplified Syntax",
              "description": "Switch expressions use arrow labels and yield statements, making them more concise than traditional switch statements."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Return Values",
              "description": "They allow a switch block to directly return a value, streamlining control flow."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-best-practices-core-java-f-23",
      "skillLevel": "beginner",
      "shortTitle": "Java Best Practices",
      "question": "Could you share some best practices for writing maintainable Java code?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Consistent Naming",
              "description": "Use clear and consistent naming conventions to enhance readability."
            },
            {
              "title": "Code Organization",
              "description": "Organize code logically with self-documenting methods and minimal comments for non-obvious logic."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Design Patterns",
              "description": "Apply proven design patterns to solve common problems and improve code structure."
            },
            {
              "title": "Error Handling",
              "description": "Implement robust error handling using appropriate exception strategies."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-primitive-vs-reference-core-java-f-24",
      "skillLevel": "beginner",
      "shortTitle": "Primitives vs References",
      "question": "Do you know how primitive types differ from reference types in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Primitives",
              "description": "Primitives (like int, double) store actual values and have fixed sizes."
            },
            {
              "title": "Reference Types",
              "description": "Reference types (objects) store memory addresses and can represent complex data."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Memory Allocation",
              "description": "Primitives are typically stored on the stack, whereas objects are allocated on the heap."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-super-keyword-core-java-f-25",
      "skillLevel": "beginner",
      "shortTitle": "Super Keyword",
      "question": "Can you explain the purpose of the super keyword in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Definition",
              "description": "The super keyword is used to refer to the immediate parent class, enabling access to its methods and variables."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Constructor Chaining",
              "description": "In a subclass constructor, calling super() as the first statement ensures that the parent class is properly initialized."
            },
            {
              "title": "Method Access",
              "description": "It also allows calling overridden methods from the parent class."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Initialization Order",
              "description": "Enforcing super() as the first statement guarantees that the parent’s state is established before subclass initialization."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-tostring-method-core-java-f-26",
      "skillLevel": "beginner",
      "shortTitle": "toString() Method",
      "question": "Please describe the importance of the toString() method in Java.",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Representation",
              "description": "toString() returns a string representation of an object, which is useful for logging and debugging."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Customization",
              "description": "Overriding toString() in custom classes helps provide meaningful information about an object's state."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-default-constructor-core-java-f-27",
      "skillLevel": "beginner",
      "shortTitle": "Default Constructor",
      "question": "Could you explain what a default constructor in Java is?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Compiler-Generated",
              "description": "If no constructors are explicitly defined, the compiler provides a no-argument constructor that initializes fields with default values."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Usage",
              "description": "The default constructor allows object instantiation without providing initialization parameters."
            }
          ]
        }
      ],
      "relatedQuestions": []
    },
    {
      "id": "java-type-casting-core-java-f-28",
      "skillLevel": "beginner",
      "shortTitle": "Type Casting",
      "question": "Do you know the different types of casting in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Implicit Casting",
              "description": "Automatically converts a smaller type to a larger type (e.g., int to long) without data loss."
            },
            {
              "title": "Explicit Casting",
              "description": "Requires a cast operator to convert a larger type to a smaller type (e.g., double to int), which may result in data loss."
            }
          ]
        }
      ],
      "relatedQuestions": []
    }
  ]
}
