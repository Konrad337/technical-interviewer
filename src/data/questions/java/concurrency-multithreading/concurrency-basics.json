{
  "category": "Concurrency and Multithreading",
  "subcategory": "Concurrency and Multithreading",
  "questions": [
    {
      "id": "java-thread-creation",
      "skillLevel": "beginner",
      "shortTitle": "Thread Creation",
      "question": "What are the different ways to create and start a thread in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Extending Thread",
              "description": "Create a subclass of Thread and override the run() method, then create and start an instance: new MyThread().start();"
            },
            {
              "title": "Implementing Runnable",
              "description": "Implement the Runnable interface and pass it to a Thread constructor: new Thread(new MyRunnable()).start();"
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Lambda Expression",
              "description": "Use a lambda expression for the Runnable: new Thread(() -> System.out.println(\"Thread running\")).start();"
            },
            {
              "title": "ExecutorService",
              "description": "Use a thread pool via ExecutorService: executorService.submit(() -> task); (preferred in modern applications)"
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Callable Interface",
              "description": "Use Callable when you need to return a result or throw checked exceptions: Future<Result> future = executorService.submit(callableTask);"
            },
            {
              "title": "CompletableFuture",
              "description": "Use CompletableFuture for asynchronous programming with callbacks: CompletableFuture.supplyAsync(() -> calculateValue());"
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-executor-framework",
        "java-completablefuture"
      ]
    },
    {
      "id": "java-thread-lifecycle",
      "skillLevel": "beginner",
      "shortTitle": "Thread Lifecycle",
      "question": "What are the states in a thread's lifecycle in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "NEW",
              "description": "Thread is created but not yet started (start() has not been called)."
            },
            {
              "title": "RUNNABLE",
              "description": "Thread is executing in the JVM but may be waiting for OS resources like CPU time."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "BLOCKED",
              "description": "Thread is waiting to acquire a lock to enter or re-enter a synchronized block/method."
            },
            {
              "title": "WAITING",
              "description": "Thread is waiting indefinitely for another thread to perform a particular action (via wait(), join(), or LockSupport.park())."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "TIMED_WAITING",
              "description": "Thread is waiting for another thread for a specified time period (via sleep(), wait(timeout), join(timeout))."
            },
            {
              "title": "TERMINATED",
              "description": "Thread has completed execution or ended abnormally due to an exception."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-thread-creation",
        "java-thread-synchronization"
      ]
    },
    {
      "id": "java-synchronized-methods",
      "skillLevel": "intermediate",
      "shortTitle": "synchronized Methods",
      "question": "What does the synchronized keyword do when applied to methods in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Lock Acquisition",
              "description": "When a thread executes a synchronized method, it acquires a lock on the object (this) for instance methods or the Class object for static methods."
            },
            {
              "title": "Mutual Exclusion",
              "description": "Only one thread can execute synchronized methods on the same object at a time, preventing concurrent access to shared data."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Instance vs Static",
              "description": "Synchronized instance methods use the object instance as the lock, while synchronized static methods use the Class object as the lock."
            },
            {
              "title": "Reentrancy",
              "description": "Locks in Java are reentrant, meaning a thread can acquire the same lock multiple times (e.g., when synchronized methods call each other)."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Performance Impact",
              "description": "Synchronization has overhead - it requires CPU instructions for lock acquisition/release and can limit parallelism, so use it judiciously."
            },
            {
              "title": "Memory Visibility",
              "description": "Synchronized methods ensure that changes to variables are visible to all threads, acting as memory barriers that enforce happen-before relationships."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-synchronized-blocks",
        "java-locks-api"
      ]
    },
    {
      "id": "java-synchronized-blocks",
      "skillLevel": "intermediate",
      "shortTitle": "synchronized Blocks",
      "question": "How do synchronized blocks differ from synchronized methods in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Syntax",
              "description": "synchronized blocks are defined with: synchronized(lockObject) { /* protected code */ }"
            },
            {
              "title": "Lock Granularity",
              "description": "Synchronized blocks allow finer-grained locking by protecting only critical sections of code rather than entire methods."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Custom Lock Objects",
              "description": "Synchronized blocks can use any object as the lock, not just 'this', allowing more flexible synchronization strategies."
            },
            {
              "title": "Performance Advantage",
              "description": "Synchronized blocks can improve performance by minimizing the protected code sections, reducing thread contention."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Multiple Locks",
              "description": "Using different lock objects in synchronized blocks allows different critical sections to execute concurrently when they don't interact."
            },
            {
              "title": "Lock Specification",
              "description": "Use private final objects specifically for locking to prevent external code from acquiring your locks: private final Object lock = new Object();"
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-synchronized-methods",
        "java-deadlock-prevention"
      ]
    },
    {
      "id": "java-volatile-keyword",
      "skillLevel": "intermediate",
      "shortTitle": "volatile Keyword",
      "question": "What does the volatile keyword do in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Memory Visibility",
              "description": "volatile ensures that reads and writes to a variable go directly to main memory, not thread-local caches, making changes visible to all threads."
            },
            {
              "title": "No Atomicity",
              "description": "volatile provides visibility guarantees but does not ensure atomicity for compound operations like i++ (which is read-modify-write)."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Memory Barrier",
              "description": "volatile creates a memory barrier that prevents instruction reordering around reads and writes to the variable."
            },
            {
              "title": "Use Cases",
              "description": "volatile is useful for status flags (e.g., done/running) and for variables that are written by one thread and read by others."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Happens-Before Relationship",
              "description": "volatile establishes happens-before relationships: all writes before a volatile write are visible after a volatile read of that same variable."
            },
            {
              "title": "Double-Checked Locking",
              "description": "volatile is crucial in the double-checked locking pattern: private volatile static Instance instance; ensures proper initialization visibility."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-atomic-variables",
        "java-happens-before"
      ]
    },
    {
      "id": "java-atomic-variables",
      "skillLevel": "intermediate",
      "shortTitle": "Atomic Variables",
      "question": "How do atomic variables in Java work and when should they be used?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Purpose",
              "description": "Atomic variables provide thread-safe operations on single variables without explicit locking, using atomic machine-level instructions."
            },
            {
              "title": "Common Classes",
              "description": "Java provides AtomicInteger, AtomicLong, AtomicBoolean, AtomicReference, and other specialized atomic classes in java.util.concurrent.atomic."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Atomic Operations",
              "description": "They support atomic operations like get(), set(), getAndSet(), incrementAndGet(), compareAndSet() that execute as a single uninterruptible unit."
            },
            {
              "title": "Compare-and-Swap",
              "description": "Most atomic operations use Compare-and-Swap (CAS) at the hardware level, retrying until successful without blocking threads."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Performance Benefits",
              "description": "Atomic variables generally perform better than synchronized blocks for simple operations because they don't require kernel-mode transitions for lock management."
            },
            {
              "title": "Limitations",
              "description": "Atomic variables are best for independent operations on single variables. For compound actions on multiple variables, locks or higher-level concurrency constructs are needed."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-volatile-keyword",
        "java-locks-api"
      ]
    },
    {
      "id": "java-thread-safety",
      "skillLevel": "intermediate",
      "shortTitle": "Thread Safety",
      "question": "What makes a class thread-safe in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Definition",
              "description": "A thread-safe class behaves correctly when accessed from multiple threads concurrently, without requiring external synchronization."
            },
            {
              "title": "Statelessness",
              "description": "The simplest way to achieve thread safety is to be stateless (no fields) - such classes are inherently thread-safe."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Synchronization",
              "description": "Use synchronized methods/blocks to protect access to mutable state, ensuring only one thread modifies data at a time."
            },
            {
              "title": "Immutability",
              "description": "Immutable objects (whose state cannot change after construction) are inherently thread-safe without requiring synchronization."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Confinement",
              "description": "Thread confinement (using ThreadLocal) or instance confinement (encapsulating state within a single thread) can achieve safety without synchronization."
            },
            {
              "title": "Lock Splitting/Striping",
              "description": "Using multiple locks for different parts of state (like in ConcurrentHashMap) can improve concurrency while maintaining thread safety."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-immutability",
        "java-concurrent-collections"
      ]
    },
    {
      "id": "java-deadlock",
      "skillLevel": "intermediate",
      "shortTitle": "Deadlocks",
      "question": "What is a deadlock in Java and how can it be prevented?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Definition",
              "description": "A deadlock occurs when two or more threads are blocked forever, each waiting for resources held by the others."
            },
            {
              "title": "Classic Example",
              "description": "Thread A holds lock 1 and waits for lock 2, while Thread B holds lock 2 and waits for lock 1, resulting in a circular wait condition."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Lock Ordering",
              "description": "Prevent deadlocks by always acquiring locks in a consistent global order, eliminating circular wait conditions."
            },
            {
              "title": "Lock Timeouts",
              "description": "Use timed lock attempts (tryLock with timeout) so threads can give up and retry if they can't acquire all needed locks, breaking potential deadlock cycles."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Detection Tools",
              "description": "Use tools like jstack, JConsole, or thread dumps to identify deadlocks in running applications."
            },
            {
              "title": "Higher-Level Constructs",
              "description": "Use higher-level concurrency utilities like java.util.concurrent collections, or Semaphore, CountDownLatch, etc., which are designed to avoid common deadlock scenarios."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-livelock",
        "java-starvation"
      ]
    },
    {
      "id": "java-executor-framework",
      "skillLevel": "intermediate",
      "shortTitle": "Executor Framework",
      "question": "How does the Executor framework work in Java?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Purpose",
              "description": "The Executor framework separates task submission from execution, providing thread pool management and task queuing."
            },
            {
              "title": "Core Interfaces",
              "description": "Executor (basic), ExecutorService (lifecycle management), and ScheduledExecutorService (scheduling) form the framework's foundation."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Thread Pools",
              "description": "Executors.newFixedThreadPool(), newCachedThreadPool(), newSingleThreadExecutor(), and newScheduledThreadPool() create different thread pool types."
            },
            {
              "title": "Task Submission",
              "description": "Submit tasks using execute(Runnable), submit(Runnable/Callable), or schedule methods. submit() returns a Future for tracking results."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Custom ThreadPoolExecutor",
              "description": "For fine-grained control, create a custom ThreadPoolExecutor with specific core/max pool sizes, keep-alive times, work queues, and rejection policies."
            },
            {
              "title": "Shutdown",
              "description": "Properly shutdown executors with shutdown() or shutdownNow() to prevent resource leaks. awaitTermination() waits for tasks to complete."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-completablefuture",
        "java-fork-join"
      ]
    },
    {
      "id": "java-completablefuture",
      "skillLevel": "advanced",
      "shortTitle": "CompletableFuture",
      "question": "How does CompletableFuture work and what problems does it solve?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Purpose",
              "description": "CompletableFuture extends Future to provide a fluent API for composing asynchronous operations without blocking."
            },
            {
              "title": "Creation",
              "description": "Create using supplyAsync() (with result), runAsync() (void), completedFuture() (immediate result), or manually with new CompletableFuture<>()"
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Chaining Operations",
              "description": "Chain operations with thenApply(), thenAccept(), thenRun(), or thenCompose() to create pipelines of dependent actions."
            },
            {
              "title": "Error Handling",
              "description": "Handle exceptions with exceptionally(), handle(), or whenComplete() to recover from or react to errors."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Combining Futures",
              "description": "Combine multiple futures with thenCombine(), allOf(), anyOf() to coordinate complex async workflows."
            },
            {
              "title": "Thread Control",
              "description": "Methods with *Async suffix run the callback on a different thread pool. Without this suffix, the calling thread or completing thread runs the callback."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-executor-framework",
        "java-reactive-programming"
      ]
    },
    {
      "id": "java-concurrent-collections",
      "skillLevel": "intermediate",
      "shortTitle": "Concurrent Collections",
      "question": "What concurrent collections does Java provide and when should each be used?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "ConcurrentHashMap",
              "description": "Thread-safe map with high concurrency, allowing multiple threads to read and write simultaneously without blocking the entire map."
            },
            {
              "title": "CopyOnWriteArrayList",
              "description": "Thread-safe list optimized for read-heavy scenarios where modifications are rare. Each modification creates a new copy of the underlying array."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "ConcurrentLinkedQueue",
              "description": "Non-blocking, thread-safe queue based on linked nodes, suitable for high-throughput producer-consumer scenarios."
            },
            {
              "title": "BlockingQueue Implementations",
              "description": "ArrayBlockingQueue, LinkedBlockingQueue, PriorityBlockingQueue provide blocking operations (put/take) that wait when the queue is full/empty."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "ConcurrentSkipListMap/Set",
              "description": "Thread-safe, ordered collections based on skip lists, providing log(n) operations for search, insertion, and deletion."
            },
            {
              "title": "Performance Considerations",
              "description": "Choose collections based on access patterns: read-dominated (CopyOnWrite), write-dominated (Concurrent), or balanced (ConcurrentHashMap)."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-thread-safety",
        "java-locks-api"
      ]
    },
    {
      "id": "java-fork-join",
      "skillLevel": "advanced",
      "shortTitle": "Fork/Join Framework",
      "question": "What is the Fork/Join framework in Java and when should it be used?",
      "answerInsights": [
        {
          "category": "Basic",
          "points": [
            {
              "title": "Purpose",
              "description": "The Fork/Join framework is designed for recursive divide-and-conquer tasks that can be split into smaller subtasks and processed in parallel."
            },
            {
              "title": "Core Components",
              "description": "ForkJoinPool (specialized thread pool), RecursiveTask<V> (returns result), RecursiveAction (void result) are the main components."
            }
          ]
        },
        {
          "category": "Intermediate",
          "points": [
            {
              "title": "Work-Stealing",
              "description": "ForkJoinPool uses work-stealing - idle threads can take work from busy threads' queues, improving load balancing and efficiency."
            },
            {
              "title": "Implementation Pattern",
              "description": "Tasks typically follow a pattern: if (task is small enough) solve directly; else split into subtasks, fork them, and join results."
            }
          ]
        },
        {
          "category": "Advanced",
          "points": [
            {
              "title": "Parallel Streams",
              "description": "Java's parallel streams are built on top of the Fork/Join framework: collection.parallelStream() or stream.parallel() use the common pool."
            },
            {
              "title": "Best Use Cases",
              "description": "Ideal for CPU-bound tasks with clear recursive structure: sorting, searching, matrix operations, or image processing. Less suitable for I/O-bound or non-divisible tasks."
            }
          ]
        }
      ],
      "relatedQuestions": [
        "java-executor-framework",
        "java-parallel-streams"
      ]
    }
  ]
}